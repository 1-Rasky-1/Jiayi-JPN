@page "/Shaders"
@using JiayiLauncher.Features.Shaders
@using JiayiLauncher.Settings
@using JiayiLauncher.Shared.Components.Toasts

@inject NavigationManager NavigationManager
@inject IToastService ToastService

<div class="page-title">
    <h4 @onclick="BackClicked">Version Manager</h4>
    <span class="material-symbols-sharp">arrow_right</span>
    <h3>Shaders</h3>
</div>

<div class="current-shader">
    <h4 style="text-align: left; margin-top: 0;">Your current shader pack</h4>
    
    @if (ShaderManager.AppliedShader == string.Empty)
    {
        <p style="margin-bottom: 0.5rem">No shaders applied</p>
        <i>Minecraft's vanilla shaders will be used</i>
    }
    else
    {
        <div class="shader">
            <strong>@ShaderManager.AppliedShader</strong>
            <p>
                Replacing @ShaderManager.GetMaterialDiff(ShaderManager.AppliedShader).Count material files
            </p>
        </div>
        
        <JiayiButton Size="JiayiButton.ButtonSize.Small" Style="margin-top: 0.5rem" 
                     OnClick="RemoveClicked">@Strings.Remove</JiayiButton>
    }
</div>

<h4>Available shaders</h4>

<div class="find-tools">
    <span class="material-symbols-sharp">search</span>
    <JiayiTextBox Placeholder="Search shaders" @ref="_searchBox" Changed="StateHasChanged" />
</div>

<ul class="available-shaders">
    @* @foreach (var shader in ShaderManager.Shaders) *@
    @* { *@
    @*     <div class="shader"> *@
    @*         <p>@shader</p> *@
    @*     </div> *@
    @* } *@
    
    @{
        _searchResults = 0;
        foreach (var shader in ShaderManager.AvailableShaders)
        {
            if (!shader.ToLower().Contains(_searchBox?.Value?.ToLower() ?? ""))
                continue;
            
            _searchResults++;
            
            <li class="available-shader">
                <div class="shader-name" title="View shader materials" @onclick="() => ViewMaterialsClicked(shader)">
                    <strong>@shader</strong>
                    
                    <div class="shader-count">
                        <span class="material-symbols-sharp">folder</span>
                        <p>
                            @ShaderManager.GetMaterialDiff(shader).Count material files
                        </p>
                    </div>
                </div>
                
                <div class="modify-buttons">
                    <span class="material-symbols-sharp modify-button"
                          title="Rename shader" @onclick="() => RenameClicked(shader)">edit</span>
                    <span class="material-symbols-sharp modify-button" style="color: darkred"
                          title="Delete shader" @onclick="() => DeleteClicked(shader)">delete</span>

                    <JiayiButton Size="JiayiButton.ButtonSize.Small" Style="margin-left: 0.2rem"
                                 OnClick="() => ApplyClicked(shader)">@Strings.Apply</JiayiButton>
                </div>
            </li>
        }
    }

</ul>

<label class="drag-area" 
       title="Any file with compressed with the zip format can be used as a shader pack, as long as it contains material files. The launcher can find shaders anywhere in the pack.">
    Click here or drag and drop a shader pack to add it
    <InputFile OnChange="FileSelected" multiple/>
</label>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;
    
    private bool _appliedExpanded = true;
    private bool _availableExpanded; // false
    
    private JiayiTextBox? _searchBox;
    private int _searchResults;

    protected override void OnInitialized()
    {
        ShaderManager.UpdateShaders();
    }

    private async Task FileSelected(InputFileChangeEventArgs file)
    {
        if (file.FileCount == 1)
        {
            await ShaderManager.AddShader(file.File);
            _availableExpanded = true;
        }
        else
        {
            foreach (var multipleFile in file.GetMultipleFiles())
            {
                await ShaderManager.AddShader(multipleFile);
                _availableExpanded = true;
            }
        }
        
        StateHasChanged();
    }
    
    private async Task RenameClicked(string shader)
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditShader.Shader), shader);
        
        var modal = ModalService.Show<EditShader>("Rename shader", parameters);
        await modal.Result;
        
        StateHasChanged();
    }

    private async Task DeleteClicked(string shader)
    {
        var options = new List<(string, EventCallback)>
        {
            ("Yes", new EventCallback(null, () =>
            {
                ShaderManager.DeleteShader(shader);
            })),
            ("No", EventCallback.Empty)
        };
        
        var parameters = new ModalParameters()
            .Add(nameof(MessageBox.Buttons), options)
            .Add(nameof(MessageBox.Message), "Are you sure you want to delete this shader? This action is irreversible.");
        
        var modal = ModalService.Show<MessageBox>("Delete shader", parameters);
        await modal.Result;
        
        StateHasChanged();
    }

    private async Task ApplyClicked(string shader)
    {
        ShaderManager.EnableShader(shader);
        await ShaderManager.ApplyShader();
        
        StateHasChanged();
    }

    private async Task RemoveClicked()
    {
        ShaderManager.DisableShader(ShaderManager.AppliedShader);
        await ShaderManager.RestoreVanillaShaders();
        
        StateHasChanged();
    }

    private void BackClicked()
    {
        NavigationManager.NavigateTo("/Versions");
    }

    private void ViewMaterialsClicked(string shader)
    {
        var materials = ShaderManager.GetMaterialDiff(shader);
        
        var parameters = new ModalParameters()
            .Add(nameof(MessageBox.Message), $"This shader pack modifies the following material files:\n\n{string.Join("\n", materials)}");
        
        ModalService.Show<MessageBox>("Shader materials", parameters);
    }

}